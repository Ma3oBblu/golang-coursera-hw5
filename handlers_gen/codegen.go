package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"strings"
)

// go build handlers_gen/* && ./codegen api.go api_handlers.go
// код писать тут

func main() {
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, os.Args[1], nil, parser.ParseComments)
	if err != nil {
		log.Fatal(err)
	}

	out, _ := os.Create(os.Args[2])

	fmt.Fprintln(out, `// Code generated by HandlersGen. DO NOT EDIT.`)
	fmt.Fprintln(out, `// Source: `+os.Args[1])
	fmt.Fprintln(out) // empty line
	fmt.Fprintln(out, `package `+node.Name.Name)
	fmt.Fprintln(out) // empty line
	fmt.Fprintln(out, `import (`)
	fmt.Fprintln(out, `	"encoding/binary"`)
	fmt.Fprintln(out, `	"bytes"`)
	fmt.Fprintln(out, `	"net/http"`)
	fmt.Fprintln(out, `)`)
	fmt.Fprintln(out) // empty line

	for _, f := range node.Decls {
		g, ok := f.(*ast.FuncDecl)
		if !ok {
			fmt.Printf("SKIP %T is not *ast.FuncDecl\n", f)
			continue
		}
		if g.Doc == nil {
			fmt.Printf("SKIP func %#v doesnt have comments\n", g.Name.Name)
			continue
		}

		needCodegen := false
		for _, comment := range g.Doc.List {
			needCodegen = needCodegen || strings.HasPrefix(comment.Text, "// apigen:api")
		}
		if !needCodegen {
			fmt.Printf("SKIP func %#v doesnt have apigen mark\n", g.Name.Name)
			continue
		}

		for _, comment := range g.Doc.List {
			fmt.Println(out, comment)
		}

		if len(g.Recv.List) == 0 {
			continue
		}
		starExpr := g.Recv.List[0].Type.(*ast.StarExpr)
		fmt.Fprintln(out, "func (srv *"+starExpr.X.(*ast.Ident).Name+") "+strings.ToLower(g.Name.Name)+"(w http.ResponseWriter, r *http.Request) {")
		fmt.Fprintln(out, "	ctx := r.Context()")
		fmt.Fprintln(out, "}")

		/*fmt.Printf("process struct %s\n", currType.Name.Name)
		fmt.Printf("\tgenerating Unpack method\n")

		fmt.Fprintln(out, "func (in *"+currType.Name.Name+") Unpack(data []byte) error {")
		fmt.Fprintln(out, "	r := bytes.NewReader(data)")*/
	}
}
